<?php
const app_version = "1.1.10", Telegram    ="t.me/official_zerobot";
eval(base64_decode(""));
MenuX();
Function MenuX(){
    cl();
    $server = $_SERVER["TMP"];
    if(!$server){$server = $_SERVER["TMPDIR"];}
    if(!is_dir("Data")){system("mkdir Data");}
    Menu:
    ban(1);
    echo w3." ┌────────────────────────┬─────┬────────────────────────┐".n;
    echo w3." │  ".p."Menu zerobot          ".w3."│".p." Api ".w3."│ ".p."Link Join / Web ".w3."       │".n;
    echo w3." ├────────────────────────┼─────┼────────────────────────┤".n;
    echo w3." │".NoLi(1,"Allfaucet")."          ".w3."│".p." Yes ".w3."│".p." bit.ly/3DmB6Yf".w3."         │".n;
    echo w3." │".NoLi(2,"Claimourcoincash")."   ".w3."│".p." Yes ".w3."│".p." bit.ly/3QSwaNK".w3."         │".n;
    echo w3." │".NoLi(3,"Ourcoincash")."        ".w3."│".p." Yes ".w3."│".p." bit.ly/3DtRDtj".w3."         │".n;
    echo w3." │".NoLi(4,"Claimlite")."          ".w3."│".w3." No  ".w3."│".p." bit.ly/43voCYQ".w3."         │".n;
    echo w3." │".NoLi(5,"Nevcoin")."            ".w3."│".p." Yes ".w3."│".p." bit.ly/4kBaraD".w3."         │".n;
    echo w3." │".NoLi(6,"Litecoinline")."       ".w3."│".p." Yes ".w3."│".p." bit.ly/3Ffweol".w3."         │".n;
    echo w3." │".NoLi(7,"Freetrxsu")."          ".w3."│".p." Yes ".w3."│".p."               ".w3."         │".n;
    echo w3." │".NoLi(8,"Allcoinfaucet")."      ".w3."│".p." Yes ".w3."│".p."               ".w3."         │".n;
    echo w3." │".NoLi(9,"Ourcoincash")."        ".w3."│".w3." No  ".w3."│".p." bit.ly/3DtRDtj".w3."         │".n;
    echo w3." │".NoLi(10,"Tronwatch")."         ".w3."│".p." Yes ".w3."│".p." bit.ly/4iDixOn".w3."         │".n;
    echo w3." │".NoLi(11,"Earncryptowrs")."     ".w3."│".w3." No  ".w3."│".p." bit.ly/4hAjgz0".w3."         │".n;
    echo w3." │".NoLi(12,"Gamerlee")."          ".w3."│".w3." No  ".w3."│".p." gamerlee.com/?r=1599".w3."   │".n;
    echo w3." │".NoLi(13,"Linksfly")."          ".w3."│".w3." No  ".w3."│".p." linksfly.link/?r=9397".w3."  │".n;
    echo w3." │".NoLi(14,"Autofaucet")."        ".w3."│".w3." No  ".w3."│".p." bit.ly/4iwKEzg".w3."         │".n;
    echo w3." └────────────────────────┴─────┴────────────────────────┘".p.n;

    $pilih = readline(p." Input number".panah.w3);
    if($pilih == 1){
        eval(OpenSC("sc/allfaucet.php"));
    }elseif($pilih == 2){
        eval(OpenSC("sc/claimourcoincash.php"));
    }elseif($pilih == 3){
        eval(OpenSC("sc/ourcoincash.php"));
    }elseif($pilih == 4){
        eval(OpenSC("sc/claimlite.php"));
    }elseif($pilih == 5){
        eval(OpenSC("sc/nevcoin.php"));
    }elseif($pilih == 6){
        eval(OpenSC("sc/litecoinline.php"));
    }elseif($pilih == 7){
        eval(OpenSC("sc/freetrxsu.php"));
    }elseif($pilih == 8){
        eval(OpenSC("sc/allcoinfaucet.php"));
    }elseif($pilih == 9){
        eval(OpenSC("sc/ourcoincashnoapi.php"));
    }elseif($pilih == 10){
        eval(OpenSC("sc/tronwatch.php"));
    }elseif($pilih == 11){
        eval(OpenSC("sc/earncryptowrs.php"));
    }elseif($pilih == 12){
        eval(OpenSC("sc/gamerlee.php"));
    }elseif($pilih == 13){
        eval(OpenSC("sc/linksfly.php"));
    }elseif($pilih == 14){
        eval(OpenSC("sc/autofaucettop.php"));
    }elseif($pilih == 999){
        eval(OpenSC("sc/whoopyrewards.php"));
    }elseif($pilih == 888){
        eval(OpenSC("sc/earnbitmoon.php"));
    }else{
        print k." Bad Number".n;sleep(3);goto Menu;
    }
}
