<?php
const app_version = "1.1.11", Telegram    ="t.me/official_zerobot";
eval(base64_decode("CgpkZWZpbmUoImEiLCJcMDMzWzE7MzBtIik7CmRlZmluZSgiZCIsIlwwMzNbMG0iKTsKZGVmaW5lKCJtIiwiXDAzM1sxOzMxbSIpOwpkZWZpbmUoImgiLCJcMDMzWzAxOzM4OzU7MzVtIik7CmRlZmluZSgiaG0iLCJcMDMzWzE7MzJtIik7CmRlZmluZSgiayIsIlwwMzNbMTszM20iKTsKZGVmaW5lKCJiIiwiXDAzM1sxOzM0bSIpOwpkZWZpbmUoInUiLCJcMDMzWzE7MzVtIik7CmRlZmluZSgiYyIsIlwwMzNbMTszNm0iKTsKZGVmaW5lKCJwIiwiXDAzM1sxOzM3bSIpOwpkZWZpbmUoIm8iLCJcMDMzWzAxOzM4OzU7MjE0bSIpOwpkZWZpbmUoIm1wIiwiXDAzM1sxMDFtXDAzM1sxOzM3bSIpOwpkZWZpbmUoImhwIiwiXDAzM1sxMDJtXDAzM1sxOzM3bSIpOwpkZWZpbmUoImtwIiwiXDAzM1sxMDNtXDAzM1sxOzM3bSIpOwpkZWZpbmUoImJwIiwiXDAzM1sxMDRtXDAzM1sxOzM3bSIpOwpkZWZpbmUoInVwIiwiXDAzM1sxMDVtXDAzM1sxOzM3bSIpOwpkZWZpbmUoImNwIiwiXDAzM1sxMDZtXDAzM1sxOzM3bSIpOwpkZWZpbmUoInBtIiwiXDAzM1sxMDdtXDAzM1sxOzMxbSIpOwpkZWZpbmUoInBoIiwiXDAzM1sxMDdtXDAzM1sxOzMybSIpOwpkZWZpbmUoInBrIiwiXDAzM1sxMDdtXDAzM1sxOzMzbSIpOwpkZWZpbmUoInBiIiwiXDAzM1sxMDdtXDAzM1sxOzM0bSIpOwpkZWZpbmUoInB1IiwiXDAzM1sxMDdtXDAzM1sxOzM1bSIpOwpkZWZpbmUoInBjIiwiXDAzM1sxMDdtXDAzM1sxOzM2bSIpOwpkZWZpbmUoInJyIiwiXHIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyIik7CmRlZmluZSgiciIsIlxyIik7CmRlZmluZSgibiIsIlxuIik7CmRlZmluZSgibGluZSIscC4iICIuc3RyX3JlcGVhdCgi4pSAIiw1MCkubik7CmRlZmluZSgicGFuYWgiLG0uIiDigLogIik7CmRlZmluZSgidyIsbSk7CmRlZmluZSgidzIiLGspOwpkZWZpbmUoInczIixoKTsKZGVmaW5lKCJjcG0iLFsiIiwi4oiaIiwiKyIsIi0iLCIhIl0pOwpkZWZpbmUoInNlbnR0b2ZwIixwLiJzZW50IHRvIEZQIik7CmRlZmluZSgiQXBpRXJyb3IiLCJFcnJvciB8IDAgIi5uKTsKZGVmaW5lKCJTZXJ2ZXIiLCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vemJzZXJ2ZXIvemVyb2JvdC9yZWZzL2hlYWRzL21haW4vYXBwL2FwcC5waHAiKTsKZGVmaW5lKCJleGVjdXRlIiwiYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNwaWMyVnlkbVZ5TDNwbGNtOWliM1F2Y21GM0wzSmxabk12YUdWaFpITXZiV0ZwYmk4PSIpOwpkZWZpbmUoIkRhdGEiLCJEYXRhLyIpOwpGdW5jdGlvbiBUaW1lWm9uZSgpeyRhcGkgPSBqc29uX2RlY29kZShmaWxlX2dldF9jb250ZW50cygiaHR0cDovL2lwLWFwaS5jb20vanNvbiIpLDEpO2lmKCRhcGkpeyR0eiA9ICRhcGlbInRpbWV6b25lIl07ZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgkdHopO3JldHVybiAkYXBpWyJjb3VudHJ5Il07fWVsc2V7ZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCgiVVRDIik7cmV0dXJuICJVVEMiO319CkZ1bmN0aW9uIGN1cmwoJHUsICRoID0gMCwgJHAgPSAwLCRjID0gMCkge3doaWxlKHRydWUpeyRjaCA9IGN1cmxfaW5pdCgpO2N1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICR1KTtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIHRydWUpO2N1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgdHJ1ZSk7Y3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCBmYWxzZSk7Y3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1NTTF9WRVJJRllIT1NULCBmYWxzZSk7Y3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPTk5FQ1RUSU1FT1VULCAzMCk7Y3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPT0tJRSxUUlVFKTtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09PS0lFRklMRSxEYXRhLmhvc3RbMF0uIi9jb29raWUudHh0Iik7Y3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0NPT0tJRUpBUixEYXRhLmhvc3RbMF0uIi9jb29raWUudHh0Iik7aWYoJHApe2N1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCB0cnVlKTtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVEZJRUxEUywgJHApO31pZigkaCl7Y3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsICRoKTt9Y3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hFQURFUiwgdHJ1ZSk7JHIgPSBjdXJsX2V4ZWMoJGNoKTskYyA9IGN1cmxfZ2V0aW5mbygkY2gpO2lmKCEkYylyZXR1cm4gIkN1cmwgRXJyb3IgOiAiLmN1cmxfZXJyb3IoJGNoKTtlbHNleyRoZCA9IHN1YnN0cigkciwgMCwgY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSEVBREVSX1NJWkUpKTskYmQgPSBzdWJzdHIoJHIsIGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hFQURFUl9TSVpFKSk7Y3VybF9jbG9zZSgkY2gpO2lmKCEkYmQpe3ByaW50IGsuIiBDaGVjayBZb3VyIENvbm5lY3Rpb24hIjtzbGVlcCgyKTtwcmludCAiXHIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyIjtjb250aW51ZTt9cmV0dXJuIGFycmF5KCRoZCwkYmQpWzFdO319fQpGdW5jdGlvbiBnYXMoJHVybCwgJHBvc3QgPSAwLCAkaHR0cGhlYWRlciA9IDAsICRwcm94eSA9IDApeyRjaCA9IGN1cmxfaW5pdCgpO2N1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsICR1cmwpO2N1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7Y3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OLCB0cnVlKTtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIGZhbHNlKTtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIGZhbHNlKTtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDMwKTtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVElNRU9VVCwgNjApO2N1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9DT09LSUUsVFJVRSk7aWYoJHBvc3Qpe2N1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCB0cnVlKTtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVEZJRUxEUywgJHBvc3QpO31pZigkaHR0cGhlYWRlcil7Y3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsICRodHRwaGVhZGVyKTt9aWYoJHByb3h5KXtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfSFRUUFBST1hZVFVOTkVMLCB0cnVlKTtjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUFJPWFksICRwcm94eSk7fWN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IRUFERVIsIHRydWUpOyRyZXNwb25zZSA9IGN1cmxfZXhlYygkY2gpOyRodHRwY29kZSA9IGN1cmxfZ2V0aW5mbygkY2gpO2lmKCEkaHR0cGNvZGUpIHJldHVybiAiQ3VybCBFcnJvciA6ICIuY3VybF9lcnJvcigkY2gpOyBlbHNleyRoZWFkZXIgPSBzdWJzdHIoJHJlc3BvbnNlLCAwLCBjdXJsX2dldGluZm8oJGNoLCBDVVJMSU5GT19IRUFERVJfU0laRSkpOyRib2R5ID0gc3Vic3RyKCRyZXNwb25zZSwgY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSEVBREVSX1NJWkUpKTtjdXJsX2Nsb3NlKCRjaCk7cmV0dXJuIGFycmF5KCRoZWFkZXIsICRib2R5KTt9fQpGdW5jdGlvbiBFZmVrKCRzdHIsJHVzbGVlcCl7JGFyciA9IHN0cl9zcGxpdCgkc3RyKTtmb3JlYWNoICgkYXJyIGFzICRheil7cHJpbnQgJGF6O3VzbGVlcCgkdXNsZWVwKTt9fQpGdW5jdGlvbiBBbWJpbCgkcmVzLCRkZXBhbiwkYmVsYWthbmcsJG5vbW9yKXskZGF0YT1leHBsb2RlKCRiZWxha2FuZyxleHBsb2RlKCRkZXBhbiwkcmVzKVskbm9tb3JdKVswXTtyZXR1cm4gJGRhdGE7fSAKRnVuY3Rpb24gQW1iaWxfMSgkcmVzLCRwZW1pc2FoKXskZGF0YT1leHBsb2RlKCRwZW1pc2FoLCRyZXMpWzBdO3JldHVybiAkZGF0YTt9CkZ1bmN0aW9uIEFudGlCb3QoJHJlcywkTm9tb3IpeyRBbnRpQm90ID0gQW1iaWwoJHJlcywncmVsPVwiJywnXCInLCROb21vcik7cmV0dXJuICRBbnRpQm90O30KRnVuY3Rpb24gU2F2ZSgkZmlsZSl7aWYoZmlsZV9leGlzdHMoRGF0YS4kZmlsZSkpeyRkYXRhID0gZmlsZV9nZXRfY29udGVudHMoRGF0YS4kZmlsZSk7fWVsc2V7JGRhdGEgPSByZWFkbGluZSh3My4iIElucHV0ICIucC4kZmlsZS4iIDogIik7cHJpbnQgbjtmaWxlX3B1dF9jb250ZW50cyhEYXRhLiRmaWxlLCRkYXRhKTt9cmV0dXJuICRkYXRhO30KRnVuY3Rpb24gbXVsdGkoJHdhbGxldCl7JHRhbWJhaCA9IHJlYWRsaW5lKCIgIi5wLiJJbnB1dCAiLiR3YWxsZXQuIiA6Ii5wKTskc2F2ZSA9IGZvcGVuKCR3YWxsZXQsICJhIik7ZndyaXRlKCRzYXZlLCAkdGFtYmFoLm4pO2ZjbG9zZSgkc2F2ZSk7c2xlZXAoMSk7cHJpbnQgcC4iIFN1Y2Nlc3MgYWRkICIudzMuJHdhbGxldC5uLnA7c2xlZXAoMSk7fQpGdW5jdGlvbiBnZXQoJHVybCl7cmV0dXJuIGN1cmwoJHVybCxoKCkpO30KRnVuY3Rpb24gcG9zdCgkdXJsLCRkYXRhKXtyZXR1cm4gY3VybCgkdXJsLGgoKSwkZGF0YSk7fQpGdW5jdGlvbiBwb3N0dCgkdXJsLCRoZWFkPTAsICRkYXRhKXtyZXR1cm4gY3VybCgkdXJsLCAkaGVhZCwgJGRhdGEpO30KRnVuY3Rpb24gbGluZSgpe3JldHVybiBhLnN0cl9yZXBlYXQoJ+KUgCcsNTUpLm47fQpGdW5jdGlvbiBsaW5lX2F0KCl7cmV0dXJuICIgIi53My4i4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAbyIubjt9CkZ1bmN0aW9uIGxpbmVfdGcoKXtyZXR1cm4gIiAiLnczLiLilIIiO30KRnVuY3Rpb24gbGluZV9idygpe3JldHVybiAiICIudzMuIuKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgD4iLm47fQpGdW5jdGlvbiBGaXJDRigkcil7KHByZWdfbWF0Y2goJy9DbG91ZGZsYXJlLycsJHIpIHx8IHByZWdfbWF0Y2goJy9KdXN0IGEgbW9tZW50Li4uLycsJHIpKT8gJGRhdGFbJ2NmJ109dHJ1ZTokZGF0YVsnY2YnXT1mYWxzZTtyZXR1cm4gJGRhdGE7fQpGdW5jdGlvbiBnZXRVc2VyQWdlbnQoKXskdXNlckFnZW50QXJyYXlbXSA9ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTE7IFBpeGVsIEMgQnVpbGQvUlExQS4yMTAyMDUuMDA0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODkuMC40Mzg5LjkwIFNhZmFyaS81MzcuMzYgR05ld3MvMjAyMTAyMjMxMCI7JGdldEFycmF5S2V5ID0gYXJyYXlfcmFuZCgkdXNlckFnZW50QXJyYXkpO3JldHVybiAkdXNlckFnZW50QXJyYXlbJGdldEFycmF5S2V5XTt9CkZ1bmN0aW9uIG1zZygkbm8sJG1zZyl7cmV0dXJuIHBlc2FuKDAsY3BtWyRub10pLnAuJG1zZzt9CkZ1bmN0aW9uIHN1Y2Nlc3MoJGhhc2lsKXtyZXR1cm4gcGVzYW4oMCxjcG1bMV0pLiJSZXdhcmQgIi5wYW5haC5wLiRoYXNpbDt9CkZ1bmN0aW9uIGJhbCgkaGFzaWwpe3JldHVybiBwZXNhbigwLGNwbVsyXSkuIkJhbGFuY2UiLnBhbmFoLnAuJGhhc2lsO30KRnVuY3Rpb24gY2VrYXBpKCl7cmV0dXJuIHBlc2FuKDAsY3BtWzNdKS4iQXBpa2V5ICIucGFuYWgucC5BcGlfQmFsKCk7fQpGdW5jdGlvbiBFcnJvcigkaGFzaWwpe3JldHVybiBwZXNhbigwLGNwbVs0XSkuJGhhc2lsO30KRnVuY3Rpb24gcmV3YXJkKCRoYXNpbCwkbGVmdCwkY29pbil7cmV0dXJuIHBlc2FuKDAsY3BtWzFdKS5jLiRoYXNpbC5vLiIg4pSCICIucC4kbGVmdC5vLiIg4pSCICIucC5zdHJ0b3VwcGVyKCRjb2luKS5uO30KRnVuY3Rpb24gcmV3YXJkWCgkaGFzaWwsJGxlZnQsJGNvaW4pe3JldHVybiBwZXNhbigwLGNwbVsxXSkuYy4kaGFzaWwuby4iIOKUgiAiLnAuJGxlZnQuby4iIOKUgiAiLnAuc3RydG91cHBlcigkY29pbikuby4iIOKUgiAiLnAuIkFwaWtleTogIi5oLkFwaV9CYWwoKS5uO30KRnVuY3Rpb24gaXBBcGkoKXskciA9IGpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCJodHRwOi8vaXAtYXBpLmNvbS9qc29uIikpO2lmKCRyLT5zdGF0dXMgPT0gInN1Y2Nlc3MiKXJldHVybiAkcjt9CkZ1bmN0aW9uIHJlc19hcGkoJGlkKXskZGVsYXk9Nzt3aGlsZSh0cnVlKXtsb2FkKCk7JHIgPSBqc29uX2RlY29kZShmaWxlX2dldF9jb250ZW50cyhhcGlfdXJsLiIvcmVzLnBocD9rZXk9Ii5hcGlrZXkuIiZhY3Rpb249Z2V0JmlkPSIuJGlkLiImanNvbj0xIiksMSk7JHN0YXR1cyA9ICRyWyJzdGF0dXMiXTtpZigkclsicmVxdWVzdCJdID09ICJDQVBDSEFfTk9UX1JFQURZIil7cHJpbnQgcnI7bG9hZCgpO3NsZWVwKCRkZWxheSk7cHJpbnQgcnI7Y29udGludWU7fWlmKCRzdGF0dXMgPT0gMSl7cHJpbnQgcnI7cHJpbnQgYnBzX2NhcCgpO3JldHVybiAkclsicmVxdWVzdCJdO31yZXR1cm4gMDt9fQpGdW5jdGlvbiBhbnRpX2JvdCgkc291cmNlKXtpZihwcmVnX21hdGNoKCIvc2N0Zy8iLGFwaV91cmwpKXtyZXR1cm4gYW50aWJvdFhldigkc291cmNlKTt9aWYocHJlZ19tYXRjaCgiL211bHRpYm90LyIsYXBpX3VybCkpe3JldHVybiBhbnRpYm90TXVsKCRzb3VyY2UpO319CkZ1bmN0aW9uIEFwaV9CYWwoKXskciA9IGpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKGFwaV91cmwuIi9yZXMucGhwP2FjdGlvbj11c2VyaW5mbyZrZXk9Ii5hcGlrZXkpLDEpO2lmKCEkclsiYmFsYW5jZSJdKXtBcGlFcnJvcjt9cmV0dXJuICRyWyJiYWxhbmNlIl07fQpGdW5jdGlvbiBSZWNhcHRjaGFWMygkYW5jaG9yKXsKICAgIHdoaWxlKHRydWUpewogICAgICAgICRyID0gY3VybCgkYW5jaG9yLGFycmF5KCkpOwogICAgICAgICR0b2tlbiA9IEFtYmlsKCRyLCc8aW5wdXQgdHlwZT0iaGlkZGVuIiBpZD0icmVjYXB0Y2hhLXRva2VuIiB2YWx1ZT0iJywnIj4nLDEpOwogICAgICAgICRzaXRla2V5ID0gZXhwbG9kZSgiJiIsJGFuY2hvcilbMV07CiAgICAgICAgJGNvID0gZXhwbG9kZSgiJiIsJGFuY2hvcilbMl07CiAgICAgICAgJHYgPSBleHBsb2RlKCImIiwkYW5jaG9yKVs0XTsKICAgICAgICAkciA9IGN1cmwoImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaTIvcmVsb2FkPyIuJHNpdGVrZXksYXJyYXkoKSwiJHYmcmVhc29uPXEmYz0kdG9rZW4mJHYmJGNvIik7CiAgICAgICAgJHJlcyA9IGV4cGxvZGUoJyInLGV4cGxvZGUoJ1sicnJlc3AiLCInLCRyKVsxXSlbMF07CiAgICAgICAgaWYoJHJlcyl7cmV0dXJuICRyZXM7fQogICAgfQp9CkZ1bmN0aW9uIE9wZW5TQygkZmlsZW5hbWUpewogICAgJHNlcnZlciA9ICRfU0VSVkVSWydUTVAnXTsKICAgIGlmKCEkc2VydmVyKXskc2VydmVyID0gJF9TRVJWRVJbJ1RNUERJUiddO30KICAgIGlmKCFpc19kaXIoJHNlcnZlci4iL3plcm9ib3QiKSl7c3lzdGVtKCJta2RpciAiLiRzZXJ2ZXIuIi96ZXJvYm90Iik7fQogICAgaWYoZmlsZV9leGlzdHMoJHNlcnZlci4iL3plcm9ib3QvdG1wLnRtcCIpKXt1bmxpbmsoJHNlcnZlci4iL3plcm9ib3QvdG1wLnRtcCIpO30KICAgIGZpbGVfcHV0X2NvbnRlbnRzKCRzZXJ2ZXIuIi96ZXJvYm90L3RtcC50bXAiLGZpbGVfZ2V0X2NvbnRlbnRzKGJhc2U2NF9kZWNvZGUoZXhlY3V0ZSkuJGZpbGVuYW1lKSk7CiAgICByZXF1aXJlKCRzZXJ2ZXIuIi96ZXJvYm90L3RtcC50bXAiKTsKICAgIHVubGluaygkc2VydmVyLiIvemVyb2JvdC90bXAudG1wIik7Cn0KZnVuY3Rpb24geCgpe3JldHVybiByYW5kKDgwLDIwMCk7fQpmdW5jdGlvbiB5KCl7cmV0dXJuIHJhbmQoMjYsMzUpO30KZnVuY3Rpb24gdygpe3JldHVybiAiMzE0LjY3OCI7fQpGdW5jdGlvbiBfY0ljb24oJHRva2VuKXsKICAgICR0cz0gcm91bmQobWljcm90aW1lKHRydWUpICogMTAwMCk7CiAgICAkZGF0YSA9IFsicGF5bG9hZCIgPT4gYmFzZTY0X2VuY29kZShqc29uX2VuY29kZShbCiAgICAiaSIgID0+ICIxIiwKICAgICJhIiAgPT4gIjEiLAogICAgInQiICA9PiAiZGFyayIsCiAgICAidHMiID0+ICR0c10pKV07CgkkciA9IGpzb25fZGVjb2RlKGJhc2U2NF9kZWNvZGUocG9zdCh3ZWIuJy9zeXN0ZW0vbGlicy9jYXB0Y2hhL3JlcXVlc3QucGhwJywgJGRhdGEpKSk7CglwcmludCBycjsKCXByaW50IHAuIiAgIEJ5cGFzcyAiLnAuIlsiLnczLiIxIi5wLiJdIjsKCXNsZWVwKDMpOwoJJGhlYWRlcltdID0gImFjY2VwdDogKi8qIjsKCSRoZWFkZXJbXSA9ICdzZWMtY2gtdWE6ICJDaHJvbWl1bSI7dj0iMTA3IiwgIk5vdD1BP0JyYW5kIjt2PSIyNCInOwoJJGhlYWRlcltdID0gIm9yaWdpbjogIi53ZWI7CgkkaGVhZGVyW10gPSAic2VjLWNoLXVhLW1vYmlsZTogPzEiOwoJJGhlYWRlcltdID0gJ3NlYy1jaC11YS1wbGF0Zm9ybToiQW5kcm9pZCInOwoJJGhlYWRlcltdID0gInNlYy1mZXRjaC1zaXRlOiBzYW1lLW9yaWdpbiI7CgkkaGVhZGVyW10gPSAic2VjLWZldGNoLW1vZGU6IGNvcnMiOwogICAgJGhlYWRlcltdID0gInNlYy1mZXRjaC1kZXN0OiBpbWFnZSI7CiAgICAkaGVhZGVyW10gPSAiYWNjZXB0LWxhbmd1YWdlOiBpZC1JRCxpZDtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuNyI7CiAgICAkaGVhZGVyW10gPSAiZG50OiAxIjsKICAgICRoZWFkZXJbXSA9ICJyZWZlcmVyOiAiLndlYi4iLyI7CiAgICAkaGVhZGVyW10gPSAiYWNjZXB0OiBpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZyxpbWFnZS9zdmcreG1sLGltYWdlLyosKi8qO3E9MC44IjsKICAgICRyPWdhcyh3ZWIuJy9zeXN0ZW0vbGlicy9jYXB0Y2hhL3JlcXVlc3QucGhwP3BheWxvYWQ9Jy5iYXNlNjRfZW5jb2RlKCd7ImkiOjEsInRzIjonLiR0cy4nfScpLCAwLGFycmF5X21lcmdlKCRoZWFkZXIsaCgpKSk7CiAgICBwcmludCBycjsKCXByaW50IHAuIiAgIEJ5cGFzcyAiLnAuIlsiLnczLiIyIi5wLiJdIjsKCXNsZWVwKDMpOwoJcHJpbnQgcnI7CiAgICAkeCA9IHgoKTsKICAgICR5ID0geSgpOwogICAgJHcgPSB3KCk7CgkkZGF0YSA9IFsncGF5bG9hZCcgPT4gYmFzZTY0X2VuY29kZShqc29uX2VuY29kZShbCgkiaSIgID0+ICIxIiwKCSJ4IiAgPT4gJHgsCgkieSIgID0+ICR5LAoJInciICA9PiAkdywKCSJhIiAgPT4gIjIiLAoJInRzIiA9PiAkdHNdKSldOwoJJHIgPSBnYXMod2ViLicvc3lzdGVtL2xpYnMvY2FwdGNoYS9yZXF1ZXN0LnBocCcsICRkYXRhLCBoKCkpWzBdOwogICAgJGRhdGEgPSAiYT1nZXRGYXVjZXQmdG9rZW49Ii4kdG9rZW4uIiZjYXB0Y2hhPTMmY2hhbGxlbmdlPWZhbHNlJnJlc3BvbnNlPWZhbHNlJmljLWhmLWlkPTEmaWMtaGYtc2U9Ii4keC4iLCIuJHkuIiwiLiR3LiImaWMtaGYtaHA9IjsKICAgICRyPSBqc29uX2RlY29kZShwb3N0KHdlYi4iL3N5c3RlbS9hamF4LnBocCIsICRkYXRhKSAsMSk7CiAgICAKICAgIGlmKCRyWydzdGF0dXMnXSA9PSAyMDApewogICAgICAgIGJwc19jYXAoKTsKICAgICAgICBzdWMoJHJbInJld2FyZCJdLCAkclsibnVtYmVyIl0pOwogICAgfWVsc2V7CiAgICAgICAgZWNobyAiICIudzIuc3RyaXBfdGFncygkclsnbWVzc2FnZSddKTsKICAgICAgICBzbGVlcCgzKTsKICAgICAgICBwcmludCBycjsKICAgIH0KfQpGdW5jdGlvbiBfY0ljb25YKCR0b2tlbil7CiAgICAkaGVhZGVyW10gPSAiSG9zdDogIi5ob3N0WzFdOwogICAgJGhlYWRlcltdID0gIngtaWNvbmNhcHRjaGEtdG9rZW46ICIuJHRva2VuOwogICAgJGhlYWRlcltdID0gIngtcmVxdWVzdGVkLXdpdGg6IFhNTEh0dHBSZXF1ZXN0IjsKICAgICRoZWFkZXJbXSA9ICJhY2NlcHQ6ICovKiI7CgkkaGVhZGVyW10gPSAnc2VjLWNoLXVhOiAiQ2hyb21pdW0iO3Y9IjEwNyIsICJOb3Q9QT9CcmFuZCI7dj0iMjQiJzsKCSRoZWFkZXJbXSA9ICJvcmlnaW46ICIud2ViOwoJJGhlYWRlcltdID0gInNlYy1jaC11YS1tb2JpbGU6ID8xIjsKCSRoZWFkZXJbXSA9ICdzZWMtY2gtdWEtcGxhdGZvcm06IkFuZHJvaWQiJzsKCSRoZWFkZXJbXSA9ICJzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4iOwoJJGhlYWRlcltdID0gInNlYy1mZXRjaC1tb2RlOiBjb3JzIjsKICAgICRoZWFkZXJbXSA9ICJzZWMtZmV0Y2gtZGVzdDogaW1hZ2UiOwogICAgJGhlYWRlcltdID0gImFjY2VwdC1sYW5ndWFnZTogaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjciOwogICAgJGhlYWRlcltdID0gImRudDogMSI7CiAgICAkaGVhZGVyW10gPSAicmVmZXJlcjogIi53ZWIuIi8iOwogICAgJGhlYWRlcltdID0gImFjY2VwdDogaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsaW1hZ2Uvc3ZnK3htbCxpbWFnZS8qLCovKjtxPTAuOCI7CiAgICAkdGltZXN0YW1wID0gcm91bmQobWljcm90aW1lKHRydWUpICogMTAwMCk7CiAgICAkaW5pdFRpbWVzdGFtcCA9ICR0aW1lc3RhbXAgLSAyMDAwOwogICAgJHdpZGdldElEID0gd2lkZ2V0SWQoKTsKICAgICR4ID0geCgpOwogICAgJHkgPSB5KCk7CiAgICAkZGF0YSA9IFsicGF5bG9hZCIgICAgICA9PiBiYXNlNjRfZW5jb2RlKGpzb25fZW5jb2RlKFsKICAgICAgICAgICAgIndpZGdldElkIgkgICAgPT4gJHdpZGdldElELAogICAgICAgICAgICAiYWN0aW9uIiAJICAgID0+ICJMT0FEIiwKICAgICAgICAgICAgInRoZW1lIiAJICAgID0+ICJsaWdodCIsCiAgICAgICAgICAgICJ0b2tlbiIgCSAgICA9PiAkdG9rZW4sCiAgICAgICAgICAgICJ0aW1lc3RhbXAiCSAgICA9PiAkdGltZXN0YW1wLAogICAgICAgICAgICAiaW5pdFRpbWVzdGFtcCIJPT4gJGluaXRUaW1lc3RhbXAKICAgICAgICBdKSkKICAgIF07CiAgICBlY2hvIHJyOwogICAgZWNobyBwLiIgICBCeXBhc3MgIi5wLiJbIi53My4iMSIucC4iXSI7CiAgICBzbGVlcCgzKTsKICAgICRyID0ganNvbl9kZWNvZGUoYmFzZTY0X2RlY29kZShwb3N0dCh3ZWIuIi9pY2FwdGNoYS9yZXEiLGFycmF5X21lcmdlKCRoZWFkZXIsaCgpKSwkZGF0YSkpLDEpOwogICAgJGJhc2U2NEltYWdlID0gJHJbImNoYWxsZW5nZSJdOwogICAgJGNoYWxsZW5nZUlkID0gJHJbImlkZW50aWZpZXIiXTsKICAgICR0aW1lc3RhbXAgPSByb3VuZChtaWNyb3RpbWUodHJ1ZSkgKiAxMDAwKTsKICAgICRpbml0VGltZXN0YW1wID0gJHRpbWVzdGFtcCAtIDIwMDA7CiAgICAkZGF0YSA9IFsicGF5bG9hZCIgICAgICA9PiBiYXNlNjRfZW5jb2RlKGpzb25fZW5jb2RlKFsKICAgICAgICAgICAgIndpZGdldElkIgkJPT4gJHdpZGdldElELAogICAgICAgICAgICAiY2hhbGxlbmdlSWQiCT0+ICRjaGFsbGVuZ2VJZCwKICAgICAgICAgICAgImFjdGlvbiIJCT0+ICJTRUxFQ1RJT04iLAogICAgICAgICAgICAieCIJCQkJPT4gJHgsCiAgICAgICAgICAgICJ5IgkJCQk9PiAkeSwKICAgICAgICAgICAgIndpZHRoIgkJCT0+IDMyMCwKICAgICAgICAgICAgInRva2VuIiAJCT0+ICR0b2tlbiwKICAgICAgICAgICAgInRpbWVzdGFtcCIJCT0+ICR0aW1lc3RhbXAsCiAgICAgICAgICAgICJpbml0VGltZXN0YW1wIgk9PiAkaW5pdFRpbWVzdGFtcAogICAgICAgIF0pKQogICAgXTsKICAgIGVjaG8gcnI7CiAgICBlY2hvIHAuIiAgIEJ5cGFzcyAiLnAuIlsiLnczLiIyIi5wLiJdIjsKICAgICRyID0ganNvbl9kZWNvZGUoYmFzZTY0X2RlY29kZShwb3N0dCh3ZWIuIi9pY2FwdGNoYS9yZXEiLGFycmF5X21lcmdlKCRoZWFkZXIsaCgpKSwgJGRhdGEpKSwxKTsKICAgIHNsZWVwKDEpOwogICAgZWNobyBycjsKICAgIGlmKCEkclsnY29tcGxldGVkJ10pcmV0dXJuOwogICAgZWNobyBwLiIgICBCeXBhc3MgIi5wLiJbIi53My4iMyIucC4iXSI7CiAgICBzbGVlcCgyKTsKICAgICRkYXRhWydjYXB0Y2hhJ10gPSAiaWNhcHRjaGEiOwogICAgJGRhdGFbJ19pY29uY2FwdGNoYS10b2tlbiddPSR0b2tlbjsKICAgICRkYXRhWydpYy1ycSddPTE7CiAgICAkZGF0YVsnaWMtd2lkJ10gPSAkd2lkZ2V0SUQ7CiAgICAkZGF0YVsnaWMtY2lkJ10gPSAkY2hhbGxlbmdlSWQ7CiAgICAkZGF0YVsnaWMtaHAnXSA9ICcnOwogICAgcmV0dXJuICRkYXRhOwp9CkZ1bmN0aW9uIHdpZGdldElkKCkgewoJJHV1aWQgPSAnJzsKCWZvciAoJG4gPSAwOyAkbiA8IDMyOyAkbisrKSB7CgkJaWYgKCRuID09IDggfHwgJG4gPT0gMTIgfHwgJG4gPT0gMTYgfHwgJG4gPT0gMjApIHsKCQkJCSR1dWlkIC49ICctJzsKCQl9CgkJJGUgPSBtdF9yYW5kKDAsIDE1KTsKCQlpZiAoJG4gPT0gMTIpIHsKCQkJJGUgPSA0OwoJCX0gZWxzZWlmICgkbiA9PSAxNikgewoJCQkkZSA9ICgkZSAmIDB4MykgfCAweDg7CgkJfQoJCSR1dWlkIC49IGRlY2hleCgkZSk7Cgl9CglyZXR1cm4gJHV1aWQ7Cn0KCkZ1bmN0aW9uIENhcHRjaGEoJHNvdXJjZSwkcGFnZXVybCl7CiAgICBpZihwcmVnX21hdGNoKCcvZGF0YS1zaXRla2V5PSIvJywkc291cmNlKSl7CiAgICAgICAgJHNpdGVrZXk9IEFtYmlsKCRzb3VyY2UsJ2RhdGEtc2l0ZWtleT0iJywnIicsMSk7CiAgICB9ZWxzZWlmKHByZWdfbWF0Y2goIi9kYXRhLXNpdGVrZXk9Jy8iLCRzb3VyY2UpKXsKICAgICAgICAkc2l0ZWtleT0gQW1iaWwoJHNvdXJjZSwiZGF0YS1zaXRla2V5PSciLCInIiwxKTsKICAgIH1lbHNlewogICAgICAgIGVjaG8gRXJyb3IoInNpdGVrZXkgRXJyb3IiKTtzbGVlcCgyKTtlY2hvIHI7CiAgICB9CiAgICBpZihwcmVnX21hdGNoKCIvaC1jYXB0Y2hhLyIgICAsJHNvdXJjZSkpeyRyID0ganNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoYXBpX3VybC4iL2luLnBocD9rZXk9Ii5hcGlrZXkuIiZtZXRob2Q9aGNhcHRjaGEmc2l0ZWtleT0iLiRzaXRla2V5LiImcGFnZXVybD0iLiRwYWdldXJsLiImanNvbj0xIiksMSk7fQogICAgaWYocHJlZ19tYXRjaCgiL2ctcmVjYXB0Y2hhLyIgLCRzb3VyY2UpKXskciA9IGpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKGFwaV91cmwuIi9pbi5waHA/a2V5PSIuYXBpa2V5LiImbWV0aG9kPXVzZXJyZWNhcHRjaGEmZ29vZ2xla2V5PSIuJHNpdGVrZXkuIiZwYWdldXJsPSIuJHBhZ2V1cmwuIiZqc29uPTEiKSwxKTt9CiAgICBpZihwcmVnX21hdGNoKCIvY2YtdHVybnN0aWxlLyIsJHNvdXJjZSkpeyRyID0ganNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoYXBpX3VybC4iL2luLnBocD9rZXk9Ii5hcGlrZXkuIiZtZXRob2Q9dHVybnN0aWxlJnNpdGVrZXk9Ii4kc2l0ZWtleS4iJnBhZ2V1cmw9Ii4kcGFnZXVybC4iJmpzb249MSIpLDEpO30KICAgIGlmKHByZWdfbWF0Y2goIi9hdXRoa29uZy8iICAgICwkc291cmNlKSl7JHIgPSBqc29uX2RlY29kZShmaWxlX2dldF9jb250ZW50cyhhcGlfdXJsLiIvaW4ucGhwP2tleT0iLmFwaWtleS4iJm1ldGhvZD1hdXRoa29uZyZzaXRla2V5PSIuJHNpdGVrZXkuIiZwYWdldXJsPSIuJHBhZ2V1cmwuIiZqc29uPTEiKSwxKTt9CiAgICAkc3RhdHVzID0gJHJbInN0YXR1cyJdOwogICAgaWYoJHN0YXR1cyA9PSAwKXtBcGlFcnJvcjtyZXR1cm4gMDt9CiAgICAkaWQgPSAkclsicmVxdWVzdCJdOwogICAgcmV0dXJuIHJlc19hcGkoJGlkKTsgIAogICAgRXJyOgp9CkZ1bmN0aW9uIEhjYXAoJHNvdXJjZSwkcGFnZXVybCl7CiAgICBpZihwcmVnX21hdGNoKCcvZGF0YS1zaXRla2V5PSIvJywkc291cmNlKSl7CiAgICAgICAgJHNpdGVrZXk9IEFtYmlsKCRzb3VyY2UsJ2RhdGEtc2l0ZWtleT0iJywnIicsMSk7CiAgICB9ZWxzZWlmKHByZWdfbWF0Y2goIi9kYXRhLXNpdGVrZXk9Jy8iLCRzb3VyY2UpKXsKICAgICAgICAkc2l0ZWtleT0gQW1iaWwoJHNvdXJjZSwiZGF0YS1zaXRla2V5PSciLCInIiwxKTsKICAgIH1lbHNlewogICAgICAgIGVjaG8gRXJyb3IoInNpdGVrZXkgRXJyb3IiKTtzbGVlcCgyKTtlY2hvIHI7CiAgICB9CiAgICAkciA9IGpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKGFwaV91cmwuIi9pbi5waHA/a2V5PSIuYXBpa2V5LiImbWV0aG9kPWhjYXB0Y2hhJnNpdGVrZXk9Ii4kc2l0ZWtleS4iJnBhZ2V1cmw9Ii4kcGFnZXVybC4iJmpzb249MSIpLDEpOwogICAgJHN0YXR1cyA9ICRyWyJzdGF0dXMiXTsKICAgIGlmKCRzdGF0dXMgPT0gMCl7QXBpRXJyb3I7cmV0dXJuIDA7fQogICAgJGlkID0gJHJbInJlcXVlc3QiXTsKICAgIHJldHVybiByZXNfYXBpKCRpZCk7ICAKICAgIEVycjoKfQpGdW5jdGlvbiBUdXJuc3RpbGUoJHNvdXJjZSwkcGFnZXVybCl7CiAgICBpZihwcmVnX21hdGNoKCcvZGF0YS1zaXRla2V5PSIvJywkc291cmNlKSl7CiAgICAgICAgJHNpdGVrZXk9IEFtYmlsKCRzb3VyY2UsJ2RhdGEtc2l0ZWtleT0iJywnIicsMSk7CiAgICB9ZWxzZWlmKHByZWdfbWF0Y2goIi9kYXRhLXNpdGVrZXk9Jy8iLCRzb3VyY2UpKXsKICAgICAgICAkc2l0ZWtleT0gQW1iaWwoJHNvdXJjZSwiZGF0YS1zaXRla2V5PSciLCInIiwxKTsKICAgIH1lbHNlaWYocHJlZ19tYXRjaCgiL2NvbnN0IHNpdGVLZXkvIiwkc291cmNlKSl7CiAgICAgICAgJHNpdGVrZXk9IEFtYmlsKCRzb3VyY2UsImNvbnN0IHNpdGVLZXkgPSAnIiwiJyIsMSk7CiAgICB9ZWxzZWlmKHByZWdfbWF0Y2goIi9jb25zdCBzaXRla2V5LyIsJHNvdXJjZSkpewogICAgICAgICRzaXRla2V5PSBBbWJpbCgkc291cmNlLCJjb25zdCBzaXRlS2V5ID0gJyIsIiciLDEpOwogICAgfWVsc2V7CiAgICAgICAgZWNobyBFcnJvcigic2l0ZWtleSBFcnJvciIpO3NsZWVwKDIpO2VjaG8gcjsKICAgIH0KICAgICRyID0ganNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoYXBpX3VybC4iL2luLnBocD9rZXk9Ii5hcGlrZXkuIiZtZXRob2Q9dHVybnN0aWxlJnNpdGVrZXk9Ii4kc2l0ZWtleS4iJnBhZ2V1cmw9Ii4kcGFnZXVybC4iJmpzb249MSIpLDEpOwogICAgJHN0YXR1cyA9ICRyWyJzdGF0dXMiXTsKICAgIGlmKCRzdGF0dXMgPT0gMCl7QXBpRXJyb3I7cmV0dXJuIDA7fQogICAgJGlkID0gJHJbInJlcXVlc3QiXTsKICAgIHJldHVybiByZXNfYXBpKCRpZCk7ICAKICAgIEVycjoKfQpGdW5jdGlvbiBhbnRpYm90TXVsKCRzb3VyY2UpewogICAgJGRlbGF5PSA0OwogICAgJG1haW4gPSBleHBsb2RlKCciJyxleHBsb2RlKCc8aW1nIHNyYz0iJyxleHBsb2RlKCdCb3QgbGlua3MnLCRzb3VyY2UpWzFdKVsxXSlbMF07CgkkYW50aUJvdFsibWFpbiJdID0gJG1haW47Cgkkc3JjID0gZXhwbG9kZSgncmVsPVwiJywkc291cmNlKTsKCWZvcmVhY2goJHNyYyBhcyAkeCA9PiAkc291cil7CgkJaWYoJHggPT0gMCljb250aW51ZTsKCQkkbm8gPSBleHBsb2RlKCdcIicsJHNvdXIpWzBdOwoJCSRpbWcgPSBleHBsb2RlKCdcIicsZXhwbG9kZSgnPGltZyBzcmM9XCInLCRzb3VyKVsxXSlbMF07CgkJJGFudGlCb3RbJG5vXSA9ICRpbWc7Cgl9CgkkdWEgPSAiQ29udGVudC10eXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiOwogICAgJGRhdGEgPSBbImtleSI9PmFwaWtleSwibWV0aG9kIj0+ImFudGlib3QiLCJqc29uIj0+MV0gKyAkYW50aUJvdDsKICAgICRvcHRzID0gWydodHRwJyA9PlsnbWV0aG9kJyAgPT4gJ1BPU1QnLCdoZWFkZXInID0+ICR1YSwnY29udGVudCcgPT4gaHR0cF9idWlsZF9xdWVyeSgkZGF0YSldXTsKICAgICRyID0ganNvbl9kZWNvZGUoZmlsZV9nZXRfY29udGVudHMoYXBpX3VybC4nL2luLnBocCcsIGZhbHNlLCBzdHJlYW1fY29udGV4dF9jcmVhdGUoJG9wdHMpKSwxKTsKICAgICRpZCA9ICRyWyJyZXF1ZXN0Il07CiAgICB3aGlsZSh0cnVlKXsKICAgICAgICBsb2FkKCk7CiAgICAgICAgJHIgPSBqc29uX2RlY29kZShmaWxlX2dldF9jb250ZW50cyhhcGlfdXJsLiIvcmVzLnBocD9rZXk9Ii5hcGlrZXkuIiZhY3Rpb249Z2V0JmlkPSIuJGlkLiImanNvbj0xIiksMSk7CiAgICAgICAgJHN0YXR1cyA9ICRyWyJzdGF0dXMiXTsKICAgICAgICBpZigkclsicmVxdWVzdCJdID09ICJDQVBDSEFfTk9UX1JFQURZIil7cHJpbnQgcnI7bG9hZCgpO3NsZWVwKCRkZWxheSk7cHJpbnQgcnI7Y29udGludWU7fQogICAgICAgIGlmKCRzdGF0dXMgPT0gMSl7cHJpbnQgcnI7cHJpbnQgYnBzX2FuYm90KCk7JHJbInJlcXVlc3QiXTtyZXR1cm4gIisiLnN0cl9yZXBsYWNlKCIsIiwiKyIsJHJbInJlcXVlc3QiXSk7fQogICAgICAgIHJldHVybiAwOwogICAgfQp9CkZ1bmN0aW9uIGFudGlib3RYZXYoJHNvdXJjZSl7CiAgICAkZGVsYXkgPSA0OwogICAgYToKICAgICRib3QxPWV4cGxvZGUoJ1wiJyxleHBsb2RlKCdyZWw9XCInLCRzb3VyY2UpWzFdKVswXTsKICAgICRib3QyPWV4cGxvZGUoJ1wiJyxleHBsb2RlKCdyZWw9XCInLCRzb3VyY2UpWzJdKVswXTsKICAgICRib3QzPWV4cGxvZGUoJ1wiJyxleHBsb2RlKCdyZWw9XCInLCRzb3VyY2UpWzNdKVswXTsKICAgICRtYWluID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcsICRzb3VyY2UpWzFdKVswXTsKICAgICRpbWcxID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcsICRzb3VyY2UpWzJdKVswXTsKICAgICRpbWcyID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcsICRzb3VyY2UpWzNdKVswXTsKICAgICRpbWczID0gZXhwbG9kZSgnIicsZXhwbG9kZSgnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcsICRzb3VyY2UpWzRdKVswXTsKICAgIGlmKCEkYm90MSl7IGdvdG8gYTt9CiAgICAkdWEgPSAiQ29udGVudC10eXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiOwogICAgJGRhdGEgPSBhcnJheSgna2V5JyA9PiBhcGlrZXksJ21ldGhvZCcgPT4gJ2FudGlib3QnLCdtYWluJyA9PiAkbWFpbiwkYm90MSA9PiAkaW1nMSwkYm90MiA9PiAkaW1nMiwkYm90MyA9PiAkaW1nMyk7CiAgICAkb3B0cyA9IGFycmF5KCdodHRwJyA9PiBhcnJheSgnaGVhZGVyJyAgPT4gJHVhLCdtZXRob2QnID0+ICdQT1NUJywnY29udGVudCcgPT4gaHR0cF9idWlsZF9xdWVyeSgkZGF0YSkpKTsKICAgICRjb250ZXh0ICA9IHN0cmVhbV9jb250ZXh0X2NyZWF0ZSgkb3B0cyk7CiAgICAkcmVzcG9uc2UgPSBmaWxlX2dldF9jb250ZW50cyhhcGlfdXJsLiIvaW4ucGhwIiwgZmFsc2UsICRjb250ZXh0KTsKICAgICR0YXNrID0gZXhwbG9kZSgnT0t8JywgJHJlc3BvbnNlKVsxXTsKICAgIGlmKCR0YXNrKXsKICAgICAgICB3aGlsZSh0cnVlKXskcjIgPSBmaWxlX2dldF9jb250ZW50cyhhcGlfdXJsLiIvcmVzLnBocD9rZXk9Ii5hcGlrZXkuIiZpZD0iLiR0YXNrKTsKICAgICAgICAgICAgJGhhc2lsID0gZXhwbG9kZSgnT0t8JywgJHIyKVsxXTsKICAgICAgICAgICAgJGFudGIgPSBleHBsb2RlKCcsJywgJGhhc2lsKTsKICAgICAgICAgICAgaWYoJGhhc2lsKXsKICAgICAgICAgICAgICAgIHByaW50IHJyO3ByaW50IGJwc19hbmJvdCgpOwogICAgICAgICAgICAgICAgcmV0dXJuICIrIi5pbXBsb2RlKCIrIiwgJGFudGIpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH1lbHNlIGlmKCRyMiA9PSAiQ0FQQ0hBX05PVF9SRUFEWSIpe3ByaW50IHJyO2xvYWQoKTtzbGVlcCgkZGVsYXkpO3ByaW50IHJyO2NvbnRpbnVlO31lbHNle3JldHVybiAwO30KICAgICAgICB9CiAgICB9ZWxzZXtnb3RvIGE7fQp9CgpGdW5jdGlvbiBNZW51KCRubywkbWVudSl7cmV0dXJuIHByaW50IHczLiIgWyIucC4kbm8udzMuIl0gIi5wLiRtZW51Lm47fQpGdW5jdGlvbiBOb0xpKCRubywkbWVudSl7cmV0dXJuICB3My4iIFsiLnAuJG5vLnczLiJdICIucC4kbWVudTt9CkZ1bmN0aW9uIFNlbGVjdCgkbm9tb3Ipe3JldHVybiBwcmludCAiIElucHV0IDogIjt9CkZ1bmN0aW9uIFJpd2F5YXQoJG5ld2RhdGEsJGRhdGE9MCl7aWYoISRkYXRhKXskZGF0YSA9IFtdO31yZXR1cm4gYXJyYXlfbWVyZ2UoJGRhdGEsJG5ld2RhdGEpO30KRnVuY3Rpb24gU2F2ZUNva1VhKCl7Y2woKTtiYW4oKTsKICAgIGlmKCFmaWxlX2V4aXN0cyhjb2spKXsgUHJpbnQgcC4iIGNvb2tpZSA6Ii5uO1NhdmUoY29rKTt9CiAgICBpZighZmlsZV9leGlzdHModWFnKSl7IFByaW50IHAuIiB1c2VyYWdlbnQgOiIubjtTYXZlKHVhZyk7fQp9CkZ1bmN0aW9uIGF0Yl8zKCRyKXsKICAgICRhMSA9IEFudGlCb3QoJHIsMSk7CiAgICAkYTIgPSBBbnRpQm90KCRyLDIpOwogICAgJGEzID0gQW50aUJvdCgkciwzKTsKICAgIHJldHVybiAiYW50aWJvdGxpbmtzPSskYTMrJGExKyRhMiI7Cn0KRnVuY3Rpb24gYmFuKCRtZW51PW51bGwpewogICAgY2woKTsKICAgIGVjaG8gbGluZV9hdCgpOwogICAgCiAgICBpZigkbWVudSA9PSBudWxsKXsKICAgICAgICBlY2hvIGxpbmVfdGcoKS5wLiIgU2NyaXB0ICAgOiAiLnAuaG9zdFswXS5wLiIgWyIudzMuIlZlcjogIi52ZXJzaW9uLnAuIl0iLm47CiAgICB9ZWxzZWlmKCRtZW51ID09IDEpe30KICAgIGVjaG8gbGluZV90ZygpLnAuIiBBcHAgTmFtZSA6IFplcm9ib3QgWyIudzMuYXBwX3ZlcnNpb24ucC4iXSIubjsKICAgIGVjaG8gbGluZV90ZygpLnAuIiBUZWxlZ3JhbSA6IGh0dHBzOi8vdC5tZS9vZmZpY2lhbF96ZXJvYm90Ii5uOwogICAgZWNobyBsaW5lX3RnKCkucC4iIFN0YXR1cyAgIDogRnJlZSBOb3QgRm9yIFNhbGUiLm47CiAgICBlY2hvIGxpbmVfYncoKTsgICAKfQpGdW5jdGlvbiBNZW51X0FwaSgpewogICAgYXBpa2V5OgogICAgYmFuKCk7CiAgICBlY2hvIHczLiIg4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQIi5uOwogICAgZWNobyB3My4iIOKUgiAgIi5wLiJNZW51IEFwaWtleSAgICAgICAgICAgICAgICAgIi53My4i4pSCIi5uOwogICAgZWNobyB3My4iIOKUnOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUpCIubjsKICAgIGVjaG8gdzMuIiDilIIiLk5vTGkoMSwiWGV2aWwiKS53My4iICAgICAgICAgICAgICAgICAgICDilIIiLm47CiAgICBlY2hvIHczLiIg4pSCIi5Ob0xpKDIsIk11bHRpYm90IikudzMuIiAgICAgICAgICAgICAgICAg4pSCIi5uOwogICAgZWNobyB3My4iIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmCIubjsKICAgICRwaWxpaCA9IHJlYWRsaW5lKHczLiIgSW5wdXQiLnBhbmFoLnApOwogICAgaWYoJHBpbGloID09IDEpewogICAgICAgIGRlZmluZSgiYXBpX3VybCIsImh0dHA6Ly9hcGkuc2N0Zy54eXoiKTsKICAgICAgICBTYXZlKCJBcGlrZXkiKTsKICAgICAgICBkZWZpbmUoImFwaWtleSIsZmlsZV9nZXRfY29udGVudHMoRGF0YS4iL0FwaWtleSIpKTsKICAgIH1lbHNlaWYoJHBpbGloID09IDIpewogICAgICAgIGRlZmluZSgiYXBpX3VybCIsImh0dHA6Ly9hcGkubXVsdGlib3QuaW4iKTsKICAgICAgICBTYXZlKCJBcGlrZXkiKTsKICAgICAgICBkZWZpbmUoImFwaWtleSIsZmlsZV9nZXRfY29udGVudHMoRGF0YS4iL0FwaWtleSIpKTsKICAgIH1lbHNlewogICAgICAgIHByaW50IGsuIiBCYWQgTnVtYmVyIi5uO3NsZWVwKDMpO2dvdG8gYXBpa2V5OwogICAgfQogICAgaWYoIWZpbGVfZXhpc3RzKERhdGEuIkFwaWtleSIpKXsKICAgIGdvdG8gYXBpa2V5OwogICAgfQp9CkZ1bmN0aW9uIGxvYWQoKXsKICAgIGVjaG8gcnI7CgllY2hvIHAuIiBCeXBhc3MgWyAiLnczLiIuICAgIi5wLiIgXSI7CglzbGVlcCgxKTsKICAgIGVjaG8gcnI7CgllY2hvIHAuIiBCeXBhc3MgWyAiLnczLiIuLiAgIi5wLiIgXSI7CglzbGVlcCgxKTsKICAgIGVjaG8gcnI7CgllY2hvIHAuIiBCeXBhc3MgWyAiLnczLiIuLi4gIi5wLiIgXSI7CglzbGVlcCgxKTsKICAgIGVjaG8gcnI7CgllY2hvIHAuIiBCeXBhc3MgWyAiLnczLiIuLi4uIi5wLiIgXSI7CglzbGVlcCgxKTsKICAgIGVjaG8gcnI7Cn0KRnVuY3Rpb24gYnBzX2NhcCgpewogICAgcHJpbnQgcnI7CiAgICAkZGVsYXkgPTE7CiAgICBlY2hvIHAuIiAgIEJ5cGFzcyBDYXB0Y2hhICIudzMuIuKImiI7CiAgICBzbGVlcCgkZGVsYXkpOwogICAgcHJpbnQgcnI7fQpGdW5jdGlvbiBicHNfYW5ib3QoKXsKICAgIHByaW50IHJyOwogICAgJGRlbGF5ID0xOyAKICAgIGVjaG8gcC4iICAgQnlwYXNzIEFudGlib3QgIi53My4i4oiaIjsKICAgIHNsZWVwKCRkZWxheSk7CiAgICBwcmludCBycjsKfQpGdW5jdGlvbiBjbCgpe2lmKCBQSFBfT1NfRkFNSUxZID09ICJMaW51eCIgKXtzeXN0ZW0oJ2NsZWFyJyk7fWVsc2V7cGNsb3NlKHBvcGVuKCdjbHMnLCd3JykpO319CkZ1bmN0aW9uIERlbCgpewogICAgJGNvPVsiY29va2llLnR4dCIsY29rXTsKICAgIHVubGluayhEYXRhLiRjb1sxXSk7CiAgICB1bmxpbmsoRGF0YS5ob3N0WzBdLiIvIi4kY29bMF0pOwp9CkZ1bmN0aW9uIERlbF9Db2soKXsKICAgIGlmKCFpc19kaXIoRGF0YS5ob3N0WzBdKSl7dW5saW5rKERhdGEuaG9zdFswXS4iL2Nvb2tpZS50eHQiKTt9CiAgICBpZighaXNfZGlyKERhdGEuaG9zdFswXSkpe3N5c3RlbSgibWtkaXIgRGF0YSIpO3N5c3RlbSgibWtkaXIgIi5EYXRhLmhvc3RbMF0pO30KfQpGdW5jdGlvbiBEZWxfQXBwKCl7CiAgICAkc2VydmVyID0gJF9TRVJWRVJbIlRNUCJdOwogICAgaWYoISRzZXJ2ZXIpeyAkc2VydmVyID0gJF9TRVJWRVJbIlRNUERJUiJdOyB9CiAgICB1bmxpbmsoJHNlcnZlci4iL3plcm9ib3QvYXBwLnBocCIpOwogICAgZWNobyAiICIucC4iRGVsZXRlIERvbmUgUGxlYXNlIHJlIHJ1biAiLm8uIlsgIi5wLiJwaHAgc2VydmVyLnBocCIuby4iIF0iLm47ZGllOwp9CkZ1bmN0aW9uIHRpbSgkdG1yKXsKICAgIGRhdGVfZGVmYXVsdF90aW1lem9uZV9zZXQoIlVUQyIpOwogICAgJHBhbmFoID0gW3Audy4i4p2vIi5wLiLina/ina/ina/ina8iLHAuIuKdryIudy4i4p2vIi5wLiLina/ina/ina8iLHAuIuKdr+KdryIudy4i4p2vIi5wLiLina/ina8iLHAuIuKdr+Kdr+KdryIudy4i4p2vIi5wLiLina8iLHAuIuKdr+Kdr+Kdr+KdryIudy4i4p2vIl07CiAgICAkcmFuZCA9IHJhbmQoMSw1KTsKICAgICR0aW1yID0gKHRpbWUoKSskdG1yKSskcmFuZDsKICAgIHdoaWxlKHRydWUpOgogICAgICAgIGZvcmVhY2goJHBhbmFoIGFzICRwYW4pewogICAgICAgICAgICBwcmludCByOyRyZXM9JHRpbXItdGltZSgpOwogICAgICAgICAgICBpZigkcmVzIDwgMSl7cHJpbnQgcnI7YnJlYWs7fQogICAgICAgICAgICBwcmludCBwLiIgIENvdW50ZG93biIudzMuIiBbICIucC5kYXRlKCdIJywkcmVzKS4iOiIucC5kYXRlKCdpJywkcmVzKS4iOiIucC5kYXRlKCdzJywkcmVzKS53My4iIF0gJHBhblxyIjt1c2xlZXAoMjAwMDAwKTsKICAgICAgICB9aWYoJHJlcyA8IDEpe3ByaW50IHJyO2JyZWFrO30KICAgIGVuZHdoaWxlOyAgCn0KCkZ1bmN0aW9uIFBlc2FuKCRkYXRhPW51bGwsJGlzaSl7CiAgICAkbGVuID0gOTskbGVuc3RyID0gJGxlbi1zdHJsZW4oJGlzaSk7CiAgICBpZigkZGF0YSA9PSAwICl7CiAgICAgICAgcmV0dXJuIHczLiIgWyIucC4kaXNpLnczLiJdICIucDsKICAgIH1lbHNlaWYoJGRhdGEgPT0gMSl7CiAgICAgICAgcmV0dXJuIHczLiIgWyIucC4kaXNpLnN0cl9yZXBlYXQoIiAiLCRsZW5zdHIpLnczLiJdIi5wYW5haC5wOwogICAgfQp9"));
eval(base64_decode("Ck1lbnVYKCk7"));
Function MenuX(){
    cl();
    $server = $_SERVER["TMP"];
    if(!$server){$server = $_SERVER["TMPDIR"];}
    if(!is_dir("Data")){system("mkdir Data");}
    Menu:
    ban(1);
    echo w3." ┌────────────────────────┬─────┬────────────────────────┐".n;
    echo w3." │  ".p."Menu zerobot          ".w3."│".p." Api ".w3."│ ".p."Link Join / Web ".w3."       │".n;
    echo w3." ├────────────────────────┼─────┼────────────────────────┤".n;
    echo w3." │".NoLi(1,"Allfaucet")."          ".w3."│".p." Yes ".w3."│".p." bit.ly/3DmB6Yf".w3."         │".n;
    echo w3." │".NoLi(2,"Claimourcoincash")."   ".w3."│".p." Yes ".w3."│".p." bit.ly/3QSwaNK".w3."         │".n;
    echo w3." │".NoLi(3,"Ourcoincash")."        ".w3."│".p." Yes ".w3."│".p." bit.ly/3DtRDtj".w3."         │".n;
    echo w3." │".NoLi(4,"Claimlite")."          ".w3."│".w3." No  ".w3."│".p." bit.ly/43voCYQ".w3."         │".n;
    echo w3." │".NoLi(5,"Nevcoin")."            ".w3."│".p." Yes ".w3."│".p." bit.ly/4kBaraD".w3."         │".n;
    echo w3." │".NoLi(6,"Litecoinline")."       ".w3."│".p." Yes ".w3."│".p." bit.ly/3Ffweol".w3."         │".n;
    echo w3." │".NoLi(7,"Freetrxsu")."          ".w3."│".p." Yes ".w3."│".p."               ".w3."         │".n;
    echo w3." │".NoLi(8,"Allcoinfaucet")."      ".w3."│".p." Yes ".w3."│".p."               ".w3."         │".n;
    echo w3." │".NoLi(9,"Ourcoincash")."        ".w3."│".w3." No  ".w3."│".p." bit.ly/3DtRDtj".w3."         │".n;
    echo w3." │".NoLi(10,"Tronwatch")."         ".w3."│".p." Yes ".w3."│".p." bit.ly/4iDixOn".w3."         │".n;
    echo w3." │".NoLi(11,"Earncryptowrs")."     ".w3."│".w3." No  ".w3."│".p." bit.ly/4hAjgz0".w3."         │".n;
    echo w3." │".NoLi(12,"Gamerlee")."          ".w3."│".w3." No  ".w3."│".p." gamerlee.com/?r=1599".w3."   │".n;
    echo w3." │".NoLi(13,"Linksfly")."          ".w3."│".w3." No  ".w3."│".p." linksfly.link/?r=9397".w3."  │".n;
    echo w3." │".NoLi(14,"Autofaucet")."        ".w3."│".w3." No  ".w3."│".p." bit.ly/4iwKEzg".w3."         │".n;
    echo w3." └────────────────────────┴─────┴────────────────────────┘".p.n;

    $pilih = readline(p." Input number".panah.w3);
    if($pilih == 1){
        eval(OpenSC("sc/allfaucet.php"));
    }elseif($pilih == 2){
        eval(OpenSC("sc/claimourcoincash.php"));
    }elseif($pilih == 3){
        eval(OpenSC("sc/ourcoincash.php"));
    }elseif($pilih == 4){
        eval(OpenSC("sc/claimlite.php"));
    }elseif($pilih == 5){
        eval(OpenSC("sc/nevcoin.php"));
    }elseif($pilih == 6){
        eval(OpenSC("sc/litecoinline.php"));
    }elseif($pilih == 7){
        eval(OpenSC("sc/freetrxsu.php"));
    }elseif($pilih == 8){
        eval(OpenSC("sc/allcoinfaucet.php"));
    }elseif($pilih == 9){
        eval(OpenSC("sc/ourcoincashnoapi.php"));
    }elseif($pilih == 10){
        eval(OpenSC("sc/tronwatch.php"));
    }elseif($pilih == 11){
        eval(OpenSC("sc/earncryptowrs.php"));
    }elseif($pilih == 12){
        eval(OpenSC("sc/gamerlee.php"));
    }elseif($pilih == 13){
        eval(OpenSC("sc/linksfly.php"));
    }elseif($pilih == 14){
        eval(OpenSC("sc/autofaucettop.php"));
    }elseif($pilih == 999){
        eval(OpenSC("sc/whoopyrewards.php"));
    }elseif($pilih == 888){
        eval(OpenSC("sc/earnbitmoon.php"));
    }else{
        print k." Bad Number".n;sleep(3);goto Menu;
    }
}
